# pylint: disable=missing-function-docstring
# pylint: disable=missing-class-docstring
# pylint: disable=missing-module-docstring
# pylint: disable=unused-argument
# pylint: disable=multiple-statements
# pylint: disable=invalid-name
# pylint: disable=invalid-length-returned
# pylint: disable=too-few-public-methods
# pylint: disable=too-many-public-methods
# pylint: disable=no-self-use
# pylint: disable=redefined-builtin
# pylint: disable=super-init-not-called

from typing import Any, Iterator

__libpq_version__: Any
BINARY: Any
BINARYARRAY: Any
BOOLEAN: Any
BOOLEANARRAY: Any
BYTES: Any
BYTESARRAY: Any
CIDRARRAY: Any
DATE: Any
DATEARRAY: Any
DATETIME: Any
DATETIMEARRAY: Any
DATETIMETZ: Any
DATETIMETZARRAY: Any
DECIMAL: Any
DECIMALARRAY: Any
FLOAT: Any
FLOATARRAY: Any
INETARRAY: Any
INTEGER: Any
INTEGERARRAY: Any
INTERVAL: Any
INTERVALARRAY: Any
LONGINTEGER: Any
LONGINTEGERARRAY: Any
MACADDRARRAY: Any
NUMBER: Any
PYDATE: Any
PYDATEARRAY: Any
PYDATETIME: Any
PYDATETIMEARRAY: Any
PYDATETIMETZ: Any
PYDATETIMETZARRAY: Any
PYINTERVAL: Any
PYINTERVALARRAY: Any
PYTIME: Any
PYTIMEARRAY: Any
REPLICATION_LOGICAL: int
REPLICATION_PHYSICAL: int
ROWID: Any
ROWIDARRAY: Any
STRING: Any
STRINGARRAY: Any
TIME: Any
TIMEARRAY: Any
UNICODE: Any
UNICODEARRAY: Any
UNKNOWN: Any
adapters: Any
apilevel: str
binary_types: Any
encodings: Any
paramstyle: str
sqlstate_errors: Any
string_types: Any
threadsafety: int

newdate: Any
newtime: Any
newtimestamp: Any
newtypeobject: Any


def Date(year: Any, month: Any, day: Any) -> newdate: ...
def DateFromPy(*args: Any, **kwargs: Any) -> Any: ...
def DateFromTicks(ticks: Any) -> newdate: ...
def IntervalFromPy(*args: Any, **kwargs: Any) -> Any: ...


def Time(
    hour: Any,
    minutes: Any,
    seconds: Any,
    tzinfo: Any = ...
) -> newtime: ...


def TimeFromPy(*args: Any, **kwargs: Any) -> Any: ...
def TimeFromTicks(ticks: Any) -> newtime: ...


def Timestamp(
    year: Any,
    month: Any,
    day: Any,
    hour: Any,
    minutes: Any,
    seconds: Any,
    tzinfo: Any = ...
) -> newtimestamp: ...


def TimestampFromPy(*args: Any, **kwargs: Any) -> Any: ...
def TimestampFromTicks(ticks: Any) -> newtimestamp: ...
def _connect(*args: Any, **kwargs: Any) -> Any: ...
def adapt(*args: Any, **kwargs: Any) -> Any: ...
def encrypt_password(*args: Any, **kwargs: Any) -> Any: ...
def get_wait_callback(*args: Any, **kwargs: Any) -> Any: ...
def libpq_version(*args: Any, **kwargs: Any) -> Any: ...
def new_array_type(oids: Any, name: Any, baseobj: Any) -> newtypeobject: ...
def new_type(oids: Any, name: Any, castobj: Any) -> newtypeobject: ...
def parse_dsn(*args: Any, **kwargs: Any) -> Any: ...
def quote_ident(*args: Any, **kwargs: Any) -> Any: ...
def register_type(*args: Any, **kwargs: Any) -> Any: ...
def set_wait_callback(_none: Any) -> Any: ...


class AsIs:
    adapted: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def getquoted(self, *args: Any, **kwargs: Any) -> Any: ...
    def __conform__(self, *args: Any, **kwargs: Any) -> Any: ...


prepareforbinaryencodingusingconn: Any


class Binary:
    adapted: Any = ...
    buffer: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def getquoted(self, *args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def prepare(conn: Any) -> prepareforbinaryencodingusingconn: ...
    def __conform__(self, *args: Any, **kwargs: Any) -> Any: ...


class Boolean:
    adapted: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def getquoted(self, *args: Any, **kwargs: Any) -> Any: ...
    def __conform__(self, *args: Any, **kwargs: Any) -> Any: ...


class Column:
    display_size: Any = ...
    internal_size: Any = ...
    name: Any = ...
    null_ok: Any = ...
    precision: Any = ...
    scale: Any = ...
    table_column: Any = ...
    table_oid: Any = ...
    type_code: Any = ...
    __hash__: Any = ...

    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def __eq__(self, other: Any) -> Any: ...
    def __ge__(self, other: Any) -> Any: ...
    def __getitem__(self, index: Any) -> Any: ...
    def __getstate__(self) -> Any: ...
    def __gt__(self, other: Any) -> Any: ...
    def __le__(self, other: Any) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def __setstate__(self, state: Any) -> Any: ...


class ConnectionInfo:
    backend_pid: Any = ...
    dbname: Any = ...
    dsn_parameters: Any = ...
    error_message: Any = ...
    host: Any = ...
    needs_password: Any = ...
    options: Any = ...
    password: Any = ...
    port: Any = ...
    protocol_version: Any = ...
    server_version: Any = ...
    socket: Any = ...
    ssl_attribute_names: Any = ...
    ssl_in_use: Any = ...
    status: Any = ...
    transaction_status: Any = ...
    used_password: Any = ...
    user: Any = ...

    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def parameter_status(self, *args: Any, **kwargs: Any) -> Any: ...
    def ssl_attribute(self, *args: Any, **kwargs: Any) -> Any: ...


class Error(Exception):
    cursor: Any = ...
    diag: Any = ...
    pgcode: Any = ...
    pgerror: Any = ...
    def __init__(self, *args: Any, **
                 kwargs: Any) -> None: ...

    def __reduce__(self) -> Any: ...
    def __setstate__(self, state: Any) -> Any: ...


class DatabaseError(Error):
    ...


class DataError(DatabaseError):
    ...


class Decimal:
    adapted: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def getquoted(self, *args: Any, **kwargs: Any) -> Any: ...
    def __conform__(self, *args: Any, **kwargs: Any) -> Any: ...


class Diagnostics:
    column_name: Any = ...
    constraint_name: Any = ...
    context: Any = ...
    datatype_name: Any = ...
    internal_position: Any = ...
    internal_query: Any = ...
    message_detail: Any = ...
    message_hint: Any = ...
    message_primary: Any = ...
    schema_name: Any = ...
    severity: Any = ...
    severity_nonlocalized: Any = ...
    source_file: Any = ...
    source_function: Any = ...
    source_line: Any = ...
    sqlstate: Any = ...
    statement_position: Any = ...
    table_name: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...


class Float:
    adapted: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def getquoted(self, *args: Any, **kwargs: Any) -> Any: ...
    def __conform__(self, *args: Any, **kwargs: Any) -> Any: ...


class ISQLQuote:
    _wrapped: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def getbinary(self, *args: Any, **kwargs: Any) -> Any: ...
    def getbuffer(self, *args: Any, **kwargs: Any) -> Any: ...
    def getquoted(self, *args: Any, **kwargs: Any) -> Any: ...


class Int:
    adapted: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def getquoted(self, *args: Any, **kwargs: Any) -> Any: ...
    def __conform__(self, *args: Any, **kwargs: Any) -> Any: ...


class IntegrityError(DatabaseError):
    ...


class InterfaceError(Error):
    ...


class InternalError(DatabaseError):
    ...


class List:
    adapted: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def getquoted(self, *args: Any, **kwargs: Any) -> Any: ...
    def prepare(self, *args: Any, **kwargs: Any) -> Any: ...
    def __conform__(self, *args: Any, **kwargs: Any) -> Any: ...


class NotSupportedError(DatabaseError):
    ...


class Notify:
    channel: Any = ...
    payload: Any = ...
    pid: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def __eq__(self, other: Any) -> Any: ...
    def __ge__(self, other: Any) -> Any: ...
    def __getitem__(self, index: Any) -> Any: ...
    def __gt__(self, other: Any) -> Any: ...
    def __hash__(self) -> Any: ...  # pylint: disable=invalid-hash-returned
    def __le__(self, other: Any) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...


class OperationalError(DatabaseError):
    ...


class ProgrammingError(DatabaseError):
    ...


class QueryCanceledError(OperationalError):
    ...


class QuotedString:
    adapted: Any = ...
    buffer: Any = ...
    encoding: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def getquoted(self, *args: Any, **kwargs: Any) -> Any: ...
    def prepare(self, *args: Any, **kwargs: Any) -> Any: ...
    def __conform__(self, *args: Any, **kwargs: Any) -> Any: ...


class connection:
    DataError: Any = ...
    DatabaseError: Any = ...
    Error: Any = ...
    IntegrityError: Any = ...
    InterfaceError: Any = ...
    InternalError: Any = ...
    NotSupportedError: Any = ...
    OperationalError: Any = ...
    ProgrammingError: Any = ...
    Warning: Any = ...
    async_: Any = ...
    autocommit: Any = ...
    binary_types: Any = ...
    closed: Any = ...
    cursor_factory: Any = ...
    deferrable: Any = ...
    dsn: Any = ...
    encoding: Any = ...
    info: Any = ...
    isolation_level: Any = ...
    notices: Any = ...
    notifies: Any = ...
    pgconn_ptr: Any = ...
    protocol_version: Any = ...
    readonly: Any = ...
    server_version: Any = ...
    status: Any = ...
    string_types: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def cancel(self, *args: Any, **kwargs: Any) -> Any: ...
    def close(self, *args: Any, **kwargs: Any) -> Any: ...
    def commit(self, *args: Any, **kwargs: Any) -> Any: ...

    @staticmethod
    def cursor(
        name: Any = ...,
        cursor_factory: Any = ...,
        withhold: Any = ...
    ) -> Any: ...

    def fileno(self, *args: Any, **kwargs: Any) -> Any: ...
    def get_backend_pid(self, *args: Any, **kwargs: Any) -> Any: ...
    def get_dsn_parameters(self, *args: Any, **kwargs: Any) -> Any: ...
    def get_native_connection(self, *args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def get_parameter_status(parameter: Any) -> Any: ...
    def get_transaction_status(self, *args: Any, **kwargs: Any) -> Any: ...
    def isexecuting(self, *args: Any, **kwargs: Any) -> Any: ...

    @staticmethod
    def lobject(
        oid: Any = ...,
        mode: Any = ...,
        new_oid: Any = ...,
        new_file: Any = ...,
        lobject_factory: Any = ...
    ) -> Any: ...

    def poll(self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self, *args: Any, **kwargs: Any) -> Any: ...
    def rollback(self, *args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def set_client_encoding(encoding: Any) -> Any: ...
    @staticmethod
    def set_isolation_level(level: Any) -> Any: ...
    def set_session(self, *args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def tpc_begin(xid: Any) -> Any: ...
    def tpc_commit(self, *args: Any, **kwargs: Any) -> Any: ...
    def tpc_prepare(self, *args: Any, **kwargs: Any) -> Any: ...
    def tpc_recover(self, *args: Any, **kwargs: Any) -> Any: ...
    def tpc_rollback(self, *args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def xid(format_id: Any, gtrid: Any, bqual: Any) -> Any: ...
    def __enter__(self) -> Any: ...
    def __exit__(self, type: Any, value: Any, traceback: Any) -> Any: ...


class cursor:
    arraysize: Any = ...
    binary_types: Any = ...
    closed: Any = ...
    connection: Any = ...
    description: Any = ...
    itersize: Any = ...
    lastrowid: Any = ...
    name: Any = ...
    pgresult_ptr: Any = ...
    query: Any = ...
    row_factory: Any = ...
    rowcount: Any = ...
    rownumber: Any = ...
    scrollable: Any = ...
    statusmessage: Any = ...
    string_types: Any = ...
    typecaster: Any = ...
    tzinfo_factory: Any = ...
    withhold: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    @staticmethod
    def callproc(procname: Any, parameters: Any = ...) -> Any: ...
    @staticmethod
    def cast(oid: Any, s: Any) -> Any: ...
    def close(self, *args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def copy_expert(sql: Any, file: Any, size: Any = ...) -> Any: ...

    @staticmethod
    def copy_from(
        file: Any,
        table: Any,
        sep: Any = ...,
        null: Any = ...,
        size: Any = ...,
        columns: Any = ...,
    ) -> Any: ...

    @staticmethod
    def copy_to(
        file: Any,
        table: Any,
        sep: Any = ...,
        null: Any = ...,
        columns: Any = ...
    ) -> Any: ...

    @staticmethod
    def execute(query: Any, params: Any = ...) -> Any: ...
    @staticmethod
    def executemany(query: Any, vars_list: Any) -> Any: ...
    def fetchall(self, *args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def fetchmany(size: Any = ...) -> listoftuple: ...
    def fetchone(self, *args: Any, **kwargs: Any) -> Any: ...
    def mogrify(self, *args: Any, **kwargs: Any) -> Any: ...
    def nextset(self, *args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def scroll(value: Any, mode: Any = ...) -> Any: ...
    @staticmethod
    def setinputsizes(sizes: Any) -> Any: ...
    @staticmethod
    def setoutputsize(size: Any, column: Any = ...) -> Any: ...
    def __enter__(self) -> Any: ...
    def __exit__(self, type: Any, value: Any, traceback: Any) -> Any: ...
    def __iter__(  # pylint: disable=non-iterator-returned
        self) -> Iterator[Any]: ...

    def __next__(self) -> Any: ...


class ReplicationConnection(connection):
    autocommit: Any = ...
    isolation_level: Any = ...
    replication_type: Any = ...
    reset: Any = ...
    set_isolation_level: Any = ...
    set_session: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...


class ReplicationCursor(cursor):
    feedback_timestamp: Any = ...
    io_timestamp: Any = ...
    wal_end: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...

    @staticmethod
    def consume_stream(
        consumer: Any,
        keepalive_interval: Any = ...
    ) -> Any: ...

    def read_message(self, *args: Any, **kwargs: Any) -> Any: ...

    @staticmethod
    def send_feedback(
        write_lsn: Any = ...,
        flush_lsn: Any = ...,
        apply_lsn: Any = ...,
        reply: Any = ...,
        force: Any = ...
    ) -> Any: ...

    @staticmethod
    def start_replication_expert(
        command: Any,
        decode: Any = ...,
        status_interval: Any = ...,
    ) -> Any: ...


class ReplicationMessage:
    cursor: Any = ...
    data_size: Any = ...
    data_start: Any = ...
    payload: Any = ...
    send_time: Any = ...
    wal_end: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...


class TransactionRollbackError(OperationalError):
    ...


class Warning(Exception):
    ...


class Xid:
    bqual: Any = ...
    database: Any = ...
    format_id: Any = ...
    gtrid: Any = ...
    owner: Any = ...
    prepared: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def from_string(self, *args: Any, **kwargs: Any) -> Any: ...
    def __getitem__(self, index: Any) -> Any: ...
    def __len__(self) -> Any: ...


listoftuple: Any


class lobject:
    closed: Any = ...
    mode: Any = ...
    oid: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def close(self, *args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def export(filename: Any) -> Any: ...
    @staticmethod
    def read(size: Any = ...) -> Any: ...
    @staticmethod
    def seek(offset: Any, whence: Any = ...) -> Any: ...
    def tell(self, *args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def truncate(len: Any = ...) -> Any: ...
    def unlink(self, *args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def write(str: str) -> Any: ...
